{"version":3,"sources":["serviceWorker.js","mazeAlgorithms/recursiveDivision.js","mazeAlgorithms/verticalMaze.js","mazeAlgorithms/horizontalMaze.js","pathfindingVisualizer/Node/node.jsx","pathfindingVisualizer/navbar.jsx","pathfindingAlgorithms/dijkstra.js","pathfindingAlgorithms/breadthFirstSearch.js","pathfindingAlgorithms/depthFirstSearch.js","pathfindingVisualizer/pathfindingVisualizer.jsx","mazeAlgorithms/randomMaze.js","index.js"],"names":["Boolean","window","location","hostname","match","walls","Node","props","state","cellHeight","this","row","col","isStart","isFinish","isWall","isVisited","isShortest","onMouseEnter","onMouseDown","onMouseUp","width","height","numRows","numColumns","extraClass","cellWidth","Math","floor","id","className","style","Component","brand","innerWidth","NavBar","algorithm","maze","pathState","mazeState","speedState","selection","visualizingAlgorithm","setState","clearPath","generatingMaze","clearGrid","clearTemp","visualizeDijkstra","visualizeBFS","visualizeDFS","generateRandomMaze","generateRecursiveDivisionMaze","generateVerticalMaze","generateHorizontalMaze","speed","value","updateSpeed","href","data-toggle","aria-haspopup","aria-expanded","aria-labelledby","type","onClick","selectAlgorithm","selectMaze","changeSpeed","visualizeAlgorithm","generateMaze","dijkstra","grid","startNode","finishNode","distance","unvisitedNodes","nodes","node","push","getNodes","visitedNodesInOrder","length","sort","a","b","closestNode","shift","Infinity","updateUnvisitedNeighbours","unvisitedNeighbours","neighbours","filter","neighbour","getUnvisitedNeighbours","unvisitedNeighbour","previousNode","neighbourNotInUnvisitedNodes","recursiveDivisionMaze","vertical","range","horizontal","getRecursiveWalls","dir","num","generateOddRandomNumber","addWall","slice","indexOf","len","result","i","array","max","randomNum","random","isStartFinish","tempWalls","temp","splice","generateRandomNumber","wall","verticalMaze","choice","getVerticalWalls","horizontalMaze","getHorizontalWalls","getInitialNum","innerHeight","initialNumRows","initialNumColumns","startNodeRow","startNodeCol","finishNodeRow","finishNodeCol","getStartFinishNode","getInitialGrid","currentRow","createNode","totalDistance","getNewGridWithWalls","newGrid","newNode","getNewGridWithMaze","getGridWithoutPath","updateNodesForRender","nodesInShortestPathOrder","PathfindingVisualizer","useState","setGrid","mouseIsPressed","setMouseIsPressed","setVisualizingAlgorithm","setGeneratingMaze","setWidth","setHeight","setSpeed","mazeSpeed","setMazeSpeed","useEffect","addEventListener","updateDimensions","removeEventListener","document","getElementById","animateAlgorithm","setTimeout","animateShortestPath","animateMaze","Fragment","currentNode","unshift","getNodesInShortestPathOrderDijkstra","breadthFirstSearch","getNodesInShortestPathOrderBFS","depthFirstSearch","getNodesInShortestPathOrderDFS","randomMaze","path","class","map","rowId","key","nodeId","handleMouseDown","handleMouseEnter","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c4e4be21.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","let walls;\r\nexport function recursiveDivisionMaze(grid, startNode, finishNode) {\r\n  if (!startNode || !finishNode || startNode === finishNode) {\r\n    return false;\r\n  }\r\n  let vertical = range(grid[0].length);\r\n  let horizontal = range(grid.length);\r\n  walls = [];\r\n  getRecursiveWalls(vertical, horizontal, grid, startNode, finishNode);\r\n  return walls;\r\n}\r\n\r\nfunction range(len) {\r\n  let result = [];\r\n  for (let i = 0; i < len; i++) {\r\n    result.push(i);\r\n  }\r\n  return result;\r\n}\r\n\r\n//dir === 0 => Horizontal\r\n//dir === 1 => Vertical\r\n\r\nfunction getRecursiveWalls(vertical, horizontal, grid, startNode, finishNode) {\r\n  if (vertical.length < 2 || horizontal.length < 2) {\r\n    return;\r\n  }\r\n  let dir;\r\n  let num;\r\n  if (vertical.length > horizontal.length) {\r\n    dir = 0;\r\n    num = generateOddRandomNumber(vertical);\r\n  }\r\n  if (vertical.length <= horizontal.length) {\r\n    dir = 1;\r\n    num = generateOddRandomNumber(horizontal);\r\n  }\r\n\r\n  if (dir === 0) {\r\n    addWall(dir, num, vertical, horizontal, startNode, finishNode);\r\n    getRecursiveWalls(\r\n      vertical.slice(0, vertical.indexOf(num)),\r\n      horizontal,\r\n      grid,\r\n      startNode,\r\n      finishNode\r\n    );\r\n    getRecursiveWalls(\r\n      vertical.slice(vertical.indexOf(num) + 1),\r\n      horizontal,\r\n      grid,\r\n      startNode,\r\n      finishNode\r\n    );\r\n  } else {\r\n    addWall(dir, num, vertical, horizontal, startNode, finishNode);\r\n    getRecursiveWalls(\r\n      vertical,\r\n      horizontal.slice(0, horizontal.indexOf(num)),\r\n      grid,\r\n      startNode,\r\n      finishNode\r\n    );\r\n    getRecursiveWalls(\r\n      vertical,\r\n      horizontal.slice(horizontal.indexOf(num) + 1),\r\n      grid,\r\n      startNode,\r\n      finishNode\r\n    );\r\n  }\r\n}\r\n\r\nfunction generateOddRandomNumber(array) {\r\n  let max = array.length - 1;\r\n  let randomNum =\r\n    Math.floor(Math.random() * (max / 2)) +\r\n    Math.floor(Math.random() * (max / 2));\r\n  if (randomNum % 2 === 0) {\r\n    if (randomNum === max) {\r\n      randomNum -= 1;\r\n    } else {\r\n      randomNum += 1;\r\n    }\r\n  }\r\n  return array[randomNum];\r\n}\r\n\r\n//dir === 0 => Horizontal\r\n//dir === 1 => Vertical\r\n\r\nfunction addWall(dir, num, vertical, horizontal, startNode, finishNode) {\r\n  let isStartFinish = false;\r\n  let tempWalls = [];\r\n  if (dir === 0) {\r\n    if (horizontal.length === 2) return;\r\n    for (let temp of horizontal) {\r\n      if (\r\n        (temp === startNode.row && num === startNode.col) ||\r\n        (temp === finishNode.row && num === finishNode.col)\r\n      ) {\r\n        isStartFinish = true;\r\n        continue;\r\n      }\r\n      tempWalls.push([temp, num]);\r\n    }\r\n  } else {\r\n    if (vertical.length === 2) return;\r\n    for (let temp of vertical) {\r\n      if (\r\n        (num === startNode.row && temp === startNode.col) ||\r\n        (num === finishNode.row && temp === finishNode.col)\r\n      ) {\r\n        isStartFinish = true;\r\n        continue;\r\n      }\r\n      tempWalls.push([num, temp]);\r\n    }\r\n  }\r\n  if (!isStartFinish) {\r\n    tempWalls.splice(generateRandomNumber(tempWalls.length), 1);\r\n  }\r\n  for (let wall of tempWalls) {\r\n    walls.push(wall);\r\n  }\r\n}\r\n\r\nfunction generateRandomNumber(max) {\r\n  let randomNum =\r\n    Math.floor(Math.random() * (max / 2)) +\r\n    Math.floor(Math.random() * (max / 2));\r\n  if (randomNum % 2 !== 0) {\r\n    if (randomNum === max) {\r\n      randomNum -= 1;\r\n    } else {\r\n      randomNum += 1;\r\n    }\r\n  }\r\n  return randomNum;\r\n}\r\n","let walls;\r\nexport function verticalMaze(grid, startNode, finishNode) {\r\n  if (!startNode || !finishNode || startNode === finishNode) {\r\n    return false;\r\n  }\r\n  let vertical = range(grid[0].length);\r\n  let horizontal = range(grid.length);\r\n  walls = [];\r\n  getVerticalWalls(vertical, horizontal, startNode, finishNode);\r\n  return walls;\r\n}\r\n\r\nfunction range(len) {\r\n  let result = [];\r\n  for (let i = 0; i < len; i++) {\r\n    result.push(i);\r\n  }\r\n  return result;\r\n}\r\n\r\nfunction getVerticalWalls(vertical, horizontal, startNode, finishNode) {\r\n  if (vertical.length < 2) {\r\n    return;\r\n  }\r\n\r\n  let choice = Math.floor(Math.random() * 2);\r\n  for (let num of vertical) {\r\n    if (choice === 0 && num % 2 !== 0) {\r\n      addWall(num, horizontal, startNode, finishNode);\r\n    }\r\n    if (choice === 1 && num % 2 === 0) {\r\n      addWall(num, horizontal, startNode, finishNode);\r\n    }\r\n  }\r\n}\r\n\r\nfunction addWall(num, horizontal, startNode, finishNode) {\r\n  let isStartFinish = false;\r\n  let tempWalls = [];\r\n  for (let temp of horizontal) {\r\n    if (\r\n      (temp === startNode.row && num === startNode.col) ||\r\n      (temp === finishNode.row && num === finishNode.col)\r\n    ) {\r\n      isStartFinish = true;\r\n      continue;\r\n    }\r\n    tempWalls.push([temp, num]);\r\n  }\r\n  if (!isStartFinish) {\r\n    tempWalls.splice(Math.floor(Math.random() * tempWalls.length), 1);\r\n  }\r\n  for (let wall of tempWalls) {\r\n    walls.push(wall);\r\n  }\r\n}\r\n","let walls;\r\nexport function horizontalMaze(grid, startNode, finishNode) {\r\n  if (!startNode || !finishNode || startNode === finishNode) {\r\n    return false;\r\n  }\r\n  let vertical = range(grid[0].length);\r\n  let horizontal = range(grid.length);\r\n  walls = [];\r\n  getHorizontalWalls(vertical, horizontal, startNode, finishNode);\r\n  return walls;\r\n}\r\n\r\nfunction range(len) {\r\n  let result = [];\r\n  for (let i = 0; i < len; i++) {\r\n    result.push(i);\r\n  }\r\n  return result;\r\n}\r\n\r\nfunction getHorizontalWalls(vertical, horizontal, startNode, finishNode) {\r\n  if (horizontal.length < 2) {\r\n    return;\r\n  }\r\n\r\n  let choice = Math.floor(Math.random() * 2);\r\n  for (let num of horizontal) {\r\n    if (choice === 0 && num % 2 !== 0) {\r\n      addWall(num, vertical, startNode, finishNode);\r\n    }\r\n    if (choice === 1 && num % 2 === 0) {\r\n      addWall(num, vertical, startNode, finishNode);\r\n    }\r\n  }\r\n}\r\n\r\nfunction addWall(num, vertical, startNode, finishNode) {\r\n  let isStartFinish = false;\r\n  let tempWalls = [];\r\n  for (let temp of vertical) {\r\n    if (\r\n      (num === startNode.row && temp === startNode.col) ||\r\n      (num === finishNode.row && temp === finishNode.col)\r\n    ) {\r\n      isStartFinish = true;\r\n      continue;\r\n    }\r\n    tempWalls.push([num, temp]);\r\n  }\r\n  if (!isStartFinish) {\r\n    tempWalls.splice(Math.floor(Math.random() * tempWalls.length), 1);\r\n  }\r\n  for (let wall of tempWalls) {\r\n    walls.push(wall);\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport \"./node.css\";\r\n\r\nclass Node extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {};\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      row,\r\n      col,\r\n      isStart,\r\n      isFinish,\r\n      isWall,\r\n      isVisited,\r\n      isShortest,\r\n      onMouseEnter,\r\n      onMouseDown,\r\n      onMouseUp,\r\n      width,\r\n      height,\r\n      numRows,\r\n      numColumns,\r\n    } = this.props;\r\n\r\n    const extraClass = isStart\r\n      ? \"node node-start\"\r\n      : isFinish\r\n      ? \"node node-finish\"\r\n      : isWall\r\n      ? \"node-wall\"\r\n      : isShortest\r\n      ? \"node node-shortest-path\"\r\n      : isVisited\r\n      ? \"node node-visited\"\r\n      : \"node\";\r\n\r\n    // FINDING CELL WIDTH AND HEIGHT FOR STYLING \r\n    let cellWidth = Math.floor((width - 100) / numColumns);\r\n    let cellHeight;\r\n    if (width > 1500) {\r\n      cellHeight = Math.floor((height - 150) / numRows);\r\n    } else if (width > 1000) {\r\n      cellHeight = Math.floor((height - 70) / numRows);\r\n    } else if (width > 500) {\r\n      cellHeight = Math.floor((height - 60) / numRows);\r\n    } else if (width > 0) {\r\n      cellHeight = Math.floor((height - 50) / numRows);\r\n    }\r\n\r\n    return (\r\n      // making each cell as div\r\n      <div\r\n        id={`node-${row}-${col}`}\r\n        className={`${extraClass}`}\r\n        style={{ \"--width\": `${cellWidth}px`, \"--height\": `${cellHeight}px` , \"borderLeft\":col!=0 && 0 ,\"borderTop\":row!=0 && 0}}\r\n        onMouseEnter={() => onMouseEnter(row, col)}\r\n        onMouseDown={() => onMouseDown(row, col)}\r\n        onMouseUp={() => onMouseUp()}\r\n      ></div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Node;\r\n","import React, { Component } from \"react\";\r\nimport \"./navbar.css\";\r\n\r\nconst brand = window.innerWidth > 600 ? \"Pathfinding Visualizer\" : \"Pathfinder\";\r\n\r\nclass NavBar extends Component {\r\n  state = {\r\n    algorithm: \"Visualize Algorithm\",\r\n    maze: \"Generate Maze\",\r\n    pathState: false, //whether there is path on grid\r\n    mazeState: false, //whether there is maze on grid\r\n    speedState: \"Slow\",\r\n  };\r\n\r\n  selectAlgorithm(selection) {\r\n    //if one algorithm is running we cannot select and run another algorithm\r\n    if (this.props.visualizingAlgorithm) {\r\n      return;\r\n    }\r\n    if (\r\n      selection === this.state.algorithm ||\r\n      this.state.algorithm === \"Visualize Algorithm\" ||\r\n      this.state.algorithm === \"Select an Algorithm!\"\r\n    ) {\r\n      this.setState({ algorithm: selection });\r\n    }\r\n    //if new algo is selected the clear the prvious grid if it is traversed\r\n    else if (this.state.pathState) {\r\n      this.clearPath();\r\n      this.setState({ algorithm: selection });\r\n    }\r\n    //select algo\r\n    else {\r\n      this.setState({ algorithm: selection });\r\n    }\r\n  }\r\n\r\n  selectMaze(selection) {\r\n    if (this.props.visualizingAlgorithm || this.props.generatingMaze) {\r\n      return;\r\n    }\r\n    if (\r\n      selection === this.state.maze ||\r\n      this.state.maze === \"Generate Maze\" ||\r\n      this.state.maze === \"Select a Maze!\"\r\n    ) {\r\n      this.setState({ maze: selection });\r\n    } else if (!this.state.mazeState) {\r\n      this.setState({ maze: selection });\r\n    } else {\r\n      this.clearGrid();\r\n      this.setState({ maze: selection });\r\n    }\r\n  }\r\n  \r\n  visualizeAlgorithm() {\r\n    if (this.props.visualizingAlgorithm || this.props.generatingMaze) {\r\n      return;\r\n    }\r\n    //clear the already present path\r\n    if (this.state.pathState) {\r\n      this.clearTemp();\r\n      return;\r\n    }\r\n    if (\r\n      this.state.algorithm === \"Visualize Algorithm\" ||\r\n      this.state.algorithm === \"Select an Algorithm!\"\r\n    ) {\r\n      this.setState({ algorithm: \"Select an Algorithm!\" });\r\n    } else {\r\n      this.setState({ pathState: true });\r\n      if (this.state.algorithm === \"Visualize Dijkstra\")\r\n        this.props.visualizeDijkstra();\r\n      // else if (this.state.algorithm === \"Visualize A*\")\r\n      //   this.props.visualizeAStar();\r\n      // else if (this.state.algorithm === \"Visualize Greedy BFS\")\r\n      //   this.props.visualizeGreedyBFS();\r\n      // else if (this.state.algorithm === \"Visualize Bidirectional Greedy\")\r\n      //   this.props.visualizeBidirectionalGreedySearch();\r\n      else if (this.state.algorithm === \"Visualize Breadth First Search\")\r\n        this.props.visualizeBFS();\r\n      else if (this.state.algorithm === \"Visualize Depth First Search\")\r\n        this.props.visualizeDFS();\r\n      // else if (this.state.algorithm === \"Visualize Random Walk\")\r\n      //   this.props.visualizeRandomWalk();\r\n    }\r\n  }\r\n\r\n  generateMaze() {\r\n    if (this.props.visualizingAlgorithm || this.props.generatingMaze) {\r\n      return;\r\n    }\r\n    // if somw path or walls already present the clear them first\r\n    if (this.state.mazeState || this.state.pathState) {\r\n      this.clearTemp();\r\n    }\r\n    if (\r\n      this.state.maze === \"Generate Maze\" ||\r\n      this.state.maze === \"Select a Maze!\"\r\n    ) {\r\n      this.setState({ maze: \"Select a Maze!\" });\r\n    } else {\r\n      this.setState({ mazeState: true });\r\n      if (this.state.maze === \"Generate Random Maze\")\r\n        this.props.generateRandomMaze();\r\n      else if (this.state.maze === \"Generate Recursive Maze\")\r\n        this.props.generateRecursiveDivisionMaze();\r\n      else if (this.state.maze === \"Generate Vertical Maze\")\r\n        this.props.generateVerticalMaze();\r\n      else if (this.state.maze === \"Generate Horizontal Maze\")\r\n        this.props.generateHorizontalMaze();\r\n    }\r\n  }\r\n\r\n  clearGrid() {\r\n    if (this.props.visualizingAlgorithm || this.props.generatingMaze) {\r\n      return;\r\n    }\r\n    this.props.clearGrid();\r\n    this.setState({\r\n      algorithm: \"Visualize Algorithm\",\r\n      maze: \"Generate Maze\",\r\n      pathState: false,\r\n      mazeState: false,\r\n    });\r\n  }\r\n\r\n  //just clear the traversed path not walls\r\n  clearPath() {\r\n    if (this.props.visualizingAlgorithm || this.props.generatingMaze) {\r\n      return;\r\n    }\r\n    this.props.clearPath();\r\n    this.setState({\r\n      pathState: false,\r\n      mazeState: false,\r\n    });\r\n  }\r\n\r\n  //clear the complete grid\r\n  clearTemp() {\r\n    if (this.props.visualizingAlgorithm || this.props.generatingMaze) {\r\n      return;\r\n    }\r\n    this.props.clearGrid();\r\n    this.setState({\r\n      pathState: false,\r\n      mazeState: false,\r\n    });\r\n  }\r\n\r\n  changeSpeed(speed) {\r\n    if (this.props.visualizingAlgorithm || this.props.generatingMaze) {\r\n      return;\r\n    }\r\n    let value = [10, 10];\r\n    if (speed === \"Slow\") value = [50, 30];\r\n    else if (speed === \"Medium\") value = [25, 20];\r\n    else if (speed === \"Fast\") value = [10, 10];\r\n    this.setState({ speedState: speed });\r\n    this.props.updateSpeed(value[0], value[1]);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <nav className=\"navbar navbar-expand navbar-dark bg-dark\">\r\n        <a className=\"navbar-brand h1 mb-0\" href=\"http://avdhesh11.github.io/pathfinding-visualizer\">\r\n          {brand}\r\n        </a>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarNavDropdown\">\r\n          <ul className=\"navbar-nav mr-auto\">\r\n            <li className=\"nav-item dropdown\">\r\n              <div className=\"dropdown\">\r\n                <a\r\n                  href=\"/#\"\r\n                  className=\"nav-link dropdown-toggle\"\r\n                  id=\"dropdownMenu1\"\r\n                  data-toggle=\"dropdown\"\r\n                  aria-haspopup=\"true\"\r\n                  aria-expanded=\"false\"\r\n                >\r\n                  Algorithms\r\n                </a>\r\n                <div className=\"dropdown-menu\" aria-labelledby=\"dropdownMenu1\">\r\n                  <button\r\n                    className=\"dropdown-item btn-light\"\r\n                    type=\"button\"\r\n                    onClick={() => this.selectAlgorithm(\"Visualize Dijkstra\")}\r\n                  >\r\n                    Dijkstra's Algorithm\r\n                  </button>\r\n                  {/* <button\r\n                    className=\"dropdown-item btn-light\"\r\n                    type=\"button\"\r\n                    onClick={() => this.selectAlgorithm(\"Visualize A*\")}\r\n                  >\r\n                    A* Algorithm\r\n                  </button> */}\r\n                  {/* <button\r\n                    className=\"dropdown-item btn-light\"\r\n                    type=\"button\"\r\n                    onClick={() => this.selectAlgorithm(\"Visualize Greedy BFS\")}\r\n                  >\r\n                    Greedy Best First Search\r\n                  </button> */}\r\n                  {/* <button\r\n                    className=\"dropdown-item btn-light\"\r\n                    type=\"button\"\r\n                    onClick={() =>\r\n                      this.selectAlgorithm(\"Visualize Bidirectional Greedy\")\r\n                    }\r\n                  >\r\n                    Bidirectional Greedy Search\r\n                  </button> */}\r\n                  {/* <div className=\"dropdown-divider\"></div> */}\r\n                  <button\r\n                    className=\"dropdown-item btn-light\"\r\n                    type=\"button\"\r\n                    onClick={() =>\r\n                      this.selectAlgorithm(\"Visualize Breadth First Search\")\r\n                    }\r\n                  >\r\n                    Breadth First Search\r\n                  </button>\r\n                  <button\r\n                    className=\"dropdown-item btn-light\"\r\n                    type=\"button\"\r\n                    onClick={() =>\r\n                      this.selectAlgorithm(\"Visualize Depth First Search\")\r\n                    }\r\n                  >\r\n                    Depth First Search\r\n                  </button>\r\n                  {/* <button\r\n                    className=\"dropdown-item btn-light\"\r\n                    type=\"button\"\r\n                    onClick={() =>\r\n                      this.selectAlgorithm(\"Visualize Random Walk\")\r\n                    }\r\n                  >\r\n                    Random Walk\r\n                  </button> */}\r\n                </div>\r\n              </div>{\" \"}\r\n            </li>\r\n\r\n            <li className=\"nav-item dropdown\">\r\n              <div className=\"dropdown\">\r\n                <a\r\n                  href=\"/#\"\r\n                  className=\"nav-link dropdown-toggle\"\r\n                  id=\"dropdownMenu1\"\r\n                  data-toggle=\"dropdown\"\r\n                  aria-haspopup=\"true\"\r\n                  aria-expanded=\"false\"\r\n                >\r\n                  Mazes\r\n                </a>\r\n                <div className=\"dropdown-menu\" aria-labelledby=\"dropdownMenu1\">\r\n                  <button\r\n                    className=\"dropdown-item btn-light\"\r\n                    type=\"button\"\r\n                    onClick={() => this.selectMaze(\"Generate Random Maze\")}\r\n                  >\r\n                    Random Maze\r\n                  </button>\r\n                  <button\r\n                    className=\"dropdown-item btn-light\"\r\n                    type=\"button\"\r\n                    onClick={() => this.selectMaze(\"Generate Recursive Maze\")}\r\n                  >\r\n                    Recursive Division Maze\r\n                  </button>\r\n                  <button\r\n                    className=\"dropdown-item btn-light\"\r\n                    type=\"button\"\r\n                    onClick={() => this.selectMaze(\"Generate Vertical Maze\")}\r\n                  >\r\n                    Vertical Division Maze\r\n                  </button>\r\n                  <button\r\n                    className=\"dropdown-item btn-light\"\r\n                    type=\"button\"\r\n                    onClick={() => this.selectMaze(\"Generate Horizontal Maze\")}\r\n                  >\r\n                    Horizontal Division Maze\r\n                  </button>\r\n                </div>\r\n              </div>{\" \"}\r\n            </li>\r\n\r\n            <li className=\"nav-item dropdown\">\r\n              <div className=\"dropdown\">\r\n                <a\r\n                  href=\"/#\"\r\n                  className=\"nav-link dropdown-toggle\"\r\n                  id=\"dropdownMenu1\"\r\n                  data-toggle=\"dropdown\"\r\n                  aria-haspopup=\"true\"\r\n                  aria-expanded=\"false\"\r\n                >\r\n                  Speed: {this.state.speedState}\r\n                </a>\r\n                <div className=\"dropdown-menu\" aria-labelledby=\"dropdownMenu1\">\r\n                  <button\r\n                    className=\"dropdown-item btn-light\"\r\n                    type=\"button\"\r\n                    onClick={() => this.changeSpeed(\"Slow\")}\r\n                  >\r\n                     Slow\r\n                  </button>\r\n                  <button\r\n                    className=\"dropdown-item btn-light\"\r\n                    type=\"button\"\r\n                    onClick={() => this.changeSpeed(\"Medium\")}\r\n                  >\r\n                    Medium\r\n                  </button>\r\n                  <button\r\n                    className=\"dropdown-item btn-light\"\r\n                    type=\"button\"\r\n                    onClick={() => this.changeSpeed(\"Fast\")}\r\n                  >\r\n                    Fast\r\n                  </button>\r\n                </div>\r\n              </div>{\" \"}\r\n            </li>\r\n          </ul>\r\n            <button\r\n              type=\"button\"\r\n              className=\"btn btn-outline-success mr-2\"\r\n              onClick={() => this.visualizeAlgorithm()}\r\n            >\r\n              {this.state.algorithm}\r\n            </button>\r\n            <button\r\n              type=\"button\"\r\n              className=\"btn btn-outline-success mr-2\"\r\n              onClick={() => this.generateMaze()}\r\n            >\r\n              {this.state.maze}\r\n            </button>\r\n            <button\r\n              type=\"button\"\r\n              className=\"btn btn-outline-warning mr-2\"\r\n              onClick={() => this.clearGrid()}\r\n            >\r\n              Clear Gird\r\n            </button>\r\n          {/* </ul> */}\r\n        </div>\r\n      </nav>\r\n    );\r\n  }\r\n}\r\nexport default NavBar;\r\n","export function dijkstra(grid, startNode, finishNode) {\r\n  if (!startNode || !finishNode || startNode === finishNode) {\r\n    return false;\r\n  }\r\n  startNode.distance = 0;\r\n  let unvisitedNodes = getNodes(grid);\r\n  let visitedNodesInOrder = [];\r\n  while (unvisitedNodes.length !== 0) {\r\n    unvisitedNodes.sort((a, b) => a.distance - b.distance);\r\n    let closestNode = unvisitedNodes.shift();\r\n    if (closestNode.isWall) continue;\r\n    if (closestNode.distance === Infinity) return visitedNodesInOrder;      //means we had naver reach at that pt\r\n    if (closestNode === finishNode) return visitedNodesInOrder;\r\n    closestNode.isVisited = true;\r\n    visitedNodesInOrder.push(closestNode);\r\n    updateUnvisitedNeighbours(closestNode, grid);                                   //update distacnes of neighboue nodes\r\n  }\r\n}\r\n\r\nfunction getNodes(grid) {\r\n  let nodes = [];\r\n  for (let row of grid) {\r\n    for (let node of row) {\r\n      nodes.push(node);\r\n    }\r\n  }\r\n  return nodes;\r\n}\r\n\r\nfunction updateUnvisitedNeighbours(node, grid) {\r\n  let unvisitedNeighbours = getUnvisitedNeighbours(node, grid);\r\n  for (let unvisitedNeighbour of unvisitedNeighbours) {\r\n    unvisitedNeighbour.distance = node.distance + 1;\r\n    unvisitedNeighbour.previousNode = node;\r\n  }\r\n}\r\n\r\nfunction getUnvisitedNeighbours(node, grid) {\r\n  let neighbours = [];\r\n  let { row, col } = node;\r\n  if (row !== 0) neighbours.push(grid[row - 1][col]);\r\n  if (col !== grid[0].length - 1) neighbours.push(grid[row][col + 1]);\r\n  if (row !== grid.length - 1) neighbours.push(grid[row + 1][col]);\r\n  if (col !== 0) neighbours.push(grid[row][col - 1]);\r\n  return neighbours\r\n    .filter((neighbour) => !neighbour.isWall)\r\n    .filter((neighbour) => !neighbour.isVisited);\r\n}\r\n\r\nexport function getNodesInShortestPathOrderDijkstra(finishNode) {\r\n  let nodesInShortestPathOrder = [];\r\n  let currentNode = finishNode;\r\n  while (currentNode !== null) {\r\n    nodesInShortestPathOrder.unshift(currentNode);\r\n    currentNode = currentNode.previousNode;\r\n  }\r\n  return nodesInShortestPathOrder;\r\n}\r\n","export function breadthFirstSearch(grid, startNode, finishNode) {\r\n  if (!startNode || !finishNode || startNode === finishNode) {\r\n    return false;\r\n  }\r\n  let unvisitedNodes = [];                // keep track of unvisited nodes \r\n  let visitedNodesInOrder = [];           //to store path from src to dest\r\n  unvisitedNodes.push(startNode);\r\n  while (unvisitedNodes.length !== 0) {\r\n    let closestNode = unvisitedNodes.shift();    //gives first element of unvisited nodes\r\n    if (closestNode.isWall) continue;\r\n    if (closestNode === finishNode) return visitedNodesInOrder;\r\n    visitedNodesInOrder.push(closestNode);\r\n    closestNode.isVisited = true;\r\n    let unvisitedNeighbours = getUnvisitedNeighbours(closestNode, grid);\r\n    for (let unvisitedNeighbour of unvisitedNeighbours) {\r\n      unvisitedNeighbour.previousNode = closestNode;\r\n      if (neighbourNotInUnvisitedNodes(unvisitedNeighbour, unvisitedNodes)) {\r\n        unvisitedNodes.push(unvisitedNeighbour);\r\n      }\r\n    }\r\n  }\r\n  return visitedNodesInOrder;\r\n}\r\n\r\nfunction getUnvisitedNeighbours(node, grid) {\r\n  let neighbours = [];\r\n  let { row, col } = node;\r\n  if (row !== 0) neighbours.push(grid[row - 1][col]);\r\n  if (col !== grid[0].length - 1) neighbours.push(grid[row][col + 1]);\r\n  if (row !== grid.length - 1) neighbours.push(grid[row + 1][col]);\r\n  if (col !== 0) neighbours.push(grid[row][col - 1]);\r\n  return neighbours.filter((neighbour) => !neighbour.isVisited);\r\n}\r\n\r\nfunction neighbourNotInUnvisitedNodes(neighbour, unvisitedNodes) {\r\n  for (let node of unvisitedNodes) {\r\n    if (node.row === neighbour.row && node.col === neighbour.col) {\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n}\r\n\r\nexport function getNodesInShortestPathOrderBFS(finishNode) {          //for printing shortest path\r\n  let nodesInShortestPathOrder = [];\r\n  let currentNode = finishNode;\r\n  while (currentNode !== null) {\r\n    nodesInShortestPathOrder.unshift(currentNode);        //insert at beginning in array\r\n    currentNode = currentNode.previousNode;\r\n  }\r\n  return nodesInShortestPathOrder;\r\n}\r\n","export function depthFirstSearch(grid, startNode, finishNode) {\r\n  if (!startNode || !finishNode || startNode === finishNode) {\r\n    return false;\r\n  }\r\n  let unvisitedNodes = [];\r\n  let visitedNodesInOrder = [];\r\n  unvisitedNodes.push(startNode);\r\n  while (unvisitedNodes.length !== 0) {\r\n    let closestNode = unvisitedNodes.shift();\r\n    if (closestNode.isWall) continue;\r\n    if (closestNode === finishNode) return visitedNodesInOrder;\r\n    visitedNodesInOrder.push(closestNode);\r\n    closestNode.isVisited = true;\r\n    let unvisitedNeighbours = getUnvisitedNeighbours(closestNode, grid);\r\n    for (let unvisitedNeighbour of unvisitedNeighbours) {\r\n      unvisitedNeighbour.previousNode = closestNode;\r\n      unvisitedNodes.unshift(unvisitedNeighbour);\r\n    }\r\n  }\r\n  return visitedNodesInOrder;\r\n}\r\n\r\nfunction getUnvisitedNeighbours(node, grid) {\r\n  let neighbours = [];\r\n  let { row, col } = node;\r\n  if (col !== 0) neighbours.push(grid[row][col - 1]);\r\n  if (row !== 0) neighbours.push(grid[row - 1][col]);\r\n  if (col !== grid[0].length - 1) neighbours.push(grid[row][col + 1]);\r\n  if (row !== grid.length - 1) neighbours.push(grid[row + 1][col]);\r\n  return neighbours.filter((neighbour) => !neighbour.isVisited);\r\n}\r\n\r\nexport function getNodesInShortestPathOrderDFS(finishNode) {\r\n  let nodesInShortestPathOrder = [];\r\n  let currentNode = finishNode;\r\n  while (currentNode !== null) {\r\n    nodesInShortestPathOrder.unshift(currentNode);\r\n    currentNode = currentNode.previousNode;\r\n  }\r\n  return nodesInShortestPathOrder;\r\n}\r\n","\r\nimport React, { useState, useEffect } from \"react\";\r\nimport \"./pathfindingVisualizer.css\";\r\nimport Node from \"./Node/node\";\r\nimport NavBar from \"./navbar\";\r\n\r\n//Pathfinding Algorithms\r\nimport {\r\n  dijkstra,\r\n  getNodesInShortestPathOrderDijkstra,\r\n} from \"../pathfindingAlgorithms/dijkstra\";\r\n// import {\r\n//   astar,\r\n//   getNodesInShortestPathOrderAstar,\r\n// } from \"../pathfindingAlgorithms/astar\";\r\nimport {\r\n  breadthFirstSearch,\r\n  getNodesInShortestPathOrderBFS,\r\n} from \"../pathfindingAlgorithms/breadthFirstSearch\";\r\nimport {\r\n  depthFirstSearch,\r\n  getNodesInShortestPathOrderDFS,\r\n} from \"../pathfindingAlgorithms/depthFirstSearch\";\r\n// import { randomWalk } from \"../pathfindingAlgorithms/randomWalk\";\r\n// import {\r\n//   greedyBFS,\r\n//   getNodesInShortestPathOrderGreedyBFS,\r\n// } from \"../pathfindingAlgorithms/greedyBestFirstSearch\";\r\n// import {\r\n//   bidirectionalGreedySearch,\r\n//   getNodesInShortestPathOrderBidirectionalGreedySearch,\r\n// } from \"../pathfindingAlgorithms/bidirectionalGreedySearch\";\r\n\r\n//Maze Algorithms\r\nimport { randomMaze } from \"../mazeAlgorithms/randomMaze\";\r\nimport { recursiveDivisionMaze } from \"../mazeAlgorithms/recursiveDivision\";\r\nimport { verticalMaze } from \"../mazeAlgorithms/verticalMaze\";\r\nimport { horizontalMaze } from \"../mazeAlgorithms/horizontalMaze\";\r\n\r\n//get number of rows and columns based on windows width\r\n// finds row and column of grid according to screen dimensions\r\nconst [initialNumRows, initialNumColumns] = getInitialNum(\r\n  window.innerWidth,\r\n  window.innerHeight\r\n);\r\n\r\n//find random source and destination\r\nlet [startNodeRow, startNodeCol, finishNodeRow, finishNodeCol] =\r\n  getStartFinishNode(initialNumRows, initialNumColumns);\r\n\r\nconst PathfindingVisualizer = () => {\r\n  const [grid, setGrid] = useState([]);\r\n  const [mouseIsPressed, setMouseIsPressed] = useState(false);\r\n  const [visualizingAlgorithm, setVisualizingAlgorithm] = useState(false);\r\n  const [generatingMaze, setGeneratingMaze] = useState(false);\r\n  const [width, setWidth] = useState(window.innerWidth);\r\n  const [height, setHeight] = useState(window.innerHeight);\r\n  const [numRows, setNumRows] = useState(initialNumRows);\r\n  const [numColumns, setNumColumns] = useState(initialNumColumns);\r\n  const [speed, setSpeed] = useState(10);\r\n  const [mazeSpeed, setMazeSpeed] = useState(10);\r\n  // state = {\r\n  //   grid: [],\r\n  //   mouseIsPressed: false,\r\n  //   visualizingAlgorithm: false,\r\n  //   generatingMaze: false,\r\n  //   width: window.innerWidth,\r\n  //   height: window.innerHeight,\r\n  //   numRows: initialNumRows,\r\n  //   numColumns: initialNumColumns,\r\n  //   speed: 10,\r\n  //   mazeSpeed: 10,\r\n  // };\r\n\r\n  //useEffect\r\n  useEffect(() => {\r\n    window.addEventListener(\"resize\", updateDimensions);\r\n    setGrid(getInitialGrid(numRows, numColumns));\r\n    return () => {\r\n      window.removeEventListener(\"resize\", updateDimensions);\r\n    };\r\n  }, [window,width]);\r\n\r\n  const updateDimensions = () => {\r\n    setWidth(window.innerWidth);\r\n    setHeight(window.innerHeight);\r\n  };\r\n\r\n  const updateSpeed = (path, maze) => {\r\n    setSpeed(path);\r\n    setMazeSpeed(maze);\r\n  };\r\n\r\n  // //useEffect\r\n  // componentDidMount() {\r\n  //   window.addEventListener(\"resize\", this.updateDimensions);\r\n  //   const grid = getInitialGrid(this.state.numRows, this.state.numColumns);\r\n  //   this.setState({ grid });\r\n  // }\r\n\r\n  //when click mouse button wall created\r\n  const handleMouseDown = (row, col) => {\r\n    const newGrid = getNewGridWithWalls(grid, row, col);\r\n    setGrid(newGrid);\r\n    setMouseIsPressed(true);\r\n    //this.setState({ grid: newGrid, mouseIsPressed: true });\r\n  };\r\n\r\n  //when mouse button is pressed and we moving our cursor then wall is created\r\n  const handleMouseEnter = (row, col) => {\r\n    if (mouseIsPressed) {\r\n      const newGrid = getNewGridWithWalls(grid, row, col);\r\n      setGrid(newGrid);\r\n      setMouseIsPressed(true);\r\n      //this.setState({ grid: newGrid, mouseIsPressed: true });\r\n    }\r\n  };\r\n\r\n  //when release mouse button\r\n  const handleMouseUp = () => {\r\n    setMouseIsPressed(false);\r\n    //this.setState({ mouseIsPressed: false });\r\n  };\r\n\r\n  const clearGrid = () => {\r\n    if (visualizingAlgorithm || generatingMaze) {\r\n      return;\r\n    }\r\n    for (let row = 0; row < grid.length; row++) {\r\n      for (let col = 0; col < grid[0].length; col++) {\r\n        if (\r\n          !(\r\n            (row === startNodeRow && col === startNodeCol) ||\r\n            (row === finishNodeRow && col === finishNodeCol)\r\n          )\r\n        ) {\r\n            //each cell is div so we add the default class inital class-node\r\n          document.getElementById(`node-${row}-${col}`).className = \"node\";\r\n        }\r\n      }\r\n    }\r\n    const newGrid = getInitialGrid(numRows, numColumns);\r\n    //making new grid and and assigning it to main grid\r\n    setGrid(newGrid);\r\n    setVisualizingAlgorithm(false);\r\n    setGeneratingMaze(false);\r\n    // this.setState({\r\n    //   grid: newGrid,\r\n    //   visualizingAlgorithm: false,\r\n    //   generatingMaze: false,\r\n    // });\r\n  };\r\n\r\n  const clearPath = () => {\r\n    if (visualizingAlgorithm || generatingMaze) {\r\n      return;\r\n    }\r\n    for (let row = 0; row < grid.length; row++) {\r\n      for (let col = 0; col < grid[0].length; col++) {\r\n           // only those cell which are traversed becomes default cell again without distubing the walls \r\n        if (\r\n          document.getElementById(`node-${row}-${col}`).className ===\r\n          \"node node-shortest-path\"\r\n        ) {\r\n          document.getElementById(`node-${row}-${col}`).className = \"node\";\r\n        }\r\n      }\r\n    }\r\n    const newGrid = getGridWithoutPath(grid);\r\n    setGrid(newGrid);\r\n    setVisualizingAlgorithm(false);\r\n    setGeneratingMaze(false);\r\n    // this.setState({\r\n    //   grid: newGrid,\r\n    //   visualizingAlgorithm: false,\r\n    //   generatingMaze: false,\r\n    // });\r\n  };\r\n\r\n  //print shortest path\r\n  const animateShortestPath = (\r\n    nodesInShortestPathOrder,\r\n    visitedNodesInOrder\r\n  ) => {\r\n      //if only one node is present i.e start and finish is same\r\n    if (nodesInShortestPathOrder.length === 1) setVisualizingAlgorithm(false);\r\n     //except the start node\r\n    for (let i = 1; i < nodesInShortestPathOrder.length; i++) {\r\n         //if we reach finish node and we\r\n      if (i === nodesInShortestPathOrder.length - 1) {\r\n          //after printing path we render the nodes if we make walls it is ok\r\n       //but if we rmove walls the it will restore its properties of animation\r\n        setTimeout(() => {\r\n          let newGrid = updateNodesForRender(\r\n            grid,\r\n            nodesInShortestPathOrder,\r\n            visitedNodesInOrder\r\n          );\r\n          setGrid(newGrid);\r\n          setVisualizingAlgorithm(false);\r\n        }, i * (3 * speed));\r\n        return;\r\n      }\r\n      let node = nodesInShortestPathOrder[i];\r\n      setTimeout(() => {\r\n        //shortest path node\r\n        document.getElementById(`node-${node.row}-${node.col}`).className =\r\n          \"node node-shortest-path\";\r\n      }, i * (3 * speed));\r\n    }\r\n  };\r\n\r\n   //all visited nodes and nodes in shortest path\r\n  const animateAlgorithm = (visitedNodesInOrder, nodesInShortestPathOrder) => {\r\n    let newGrid = grid.slice();\r\n    for (let row of newGrid) {\r\n      for (let node of row) {\r\n        let newNode = {\r\n          ...node,\r\n          isVisited: false,\r\n        };\r\n        newGrid[node.row][node.col] = newNode;\r\n      }\r\n    }\r\n    setGrid(newGrid);\r\n    //this.setState({ grid: newGrid });\r\n    for (let i = 1; i <= visitedNodesInOrder.length; i++) {\r\n      let node = visitedNodesInOrder[i];\r\n      //if we reach the finish node then start animate shortest path route and stop the animate algo fun\r\n      if (i === visitedNodesInOrder.length) {\r\n        setTimeout(() => {\r\n          animateShortestPath(nodesInShortestPathOrder, visitedNodesInOrder);\r\n        }, i * speed);\r\n        return;\r\n      }\r\n      setTimeout(() => {\r\n        //visited node\r\n        // just add class node-visited into div to for animation\r\n        document.getElementById(`node-${node.row}-${node.col}`).className =\r\n          \"node node-visited\";\r\n      }, i * speed);\r\n    }\r\n  };\r\n\r\n//   const animateRandomWalk = (visitedNodesInOrder) => {\r\n//     for (let i = 1; i <= visitedNodesInOrder.length; i++) {\r\n//       if (i === visitedNodesInOrder.length) {\r\n//         setTimeout(() => {\r\n//           setVisualizingAlgorithm(false);\r\n//           //this.setState({ visualizingAlgorithm: false });\r\n//         }, i * speed);\r\n//         return;\r\n//       }\r\n//       let node = visitedNodesInOrder[i];\r\n//       if (i === visitedNodesInOrder.length - 1) {\r\n//         setTimeout(() => {\r\n//           //finish node\r\n//           document.getElementById(`node-${node.row}-${node.col}`).className =\r\n//             \"node node-finish-reached\";\r\n//         }, i * speed);\r\n//         continue;\r\n//       }\r\n//       setTimeout(() => {\r\n//         //visited node\r\n//         document.getElementById(`node-${node.row}-${node.col}`).className =\r\n//           \"node node-visited\";\r\n//       }, i * speed);\r\n//     }\r\n//   };\r\n\r\n//   function animateBidirectionalAlgorithm(\r\n//     visitedNodesInOrderStart,\r\n//     visitedNodesInOrderFinish,\r\n//     nodesInShortestPathOrder,\r\n//     isShortedPath\r\n//   ) {\r\n//     let len = Math.max(\r\n//       visitedNodesInOrderStart.length,\r\n//       visitedNodesInOrderFinish.length\r\n//     );\r\n//     for (let i = 1; i <= len; i++) {\r\n//       let nodeA = visitedNodesInOrderStart[i];\r\n//       let nodeB = visitedNodesInOrderFinish[i];\r\n//       if (i === visitedNodesInOrderStart.length) {\r\n//         setTimeout(() => {\r\n//           let visitedNodesInOrder = getVisitedNodesInOrder(\r\n//             visitedNodesInOrderStart,\r\n//             visitedNodesInOrderFinish\r\n//           );\r\n//           if (isShortedPath) {\r\n//             animateShortestPath(nodesInShortestPathOrder, visitedNodesInOrder);\r\n//           } else {\r\n//             setVisualizingAlgorithm(false);\r\n//             //setState({ visualizingAlgorithm: false });\r\n//           }\r\n//         }, i * speed);\r\n//         return;\r\n//       }\r\n//       setTimeout(() => {\r\n//         //visited nodes\r\n//         if (nodeA !== undefined)\r\n//           document.getElementById(`node-${nodeA.row}-${nodeA.col}`).className =\r\n//             \"node node-visited\";\r\n//         if (nodeB !== undefined)\r\n//           document.getElementById(`node-${nodeB.row}-${nodeB.col}`).className =\r\n//             \"node node-visited\";\r\n//       }, i * speed);\r\n//     }\r\n//   }\r\n\r\n  function visualizeDijkstra() {\r\n    if (visualizingAlgorithm || generatingMaze) {\r\n      return;\r\n    }\r\n    setVisualizingAlgorithm(true);\r\n    //this.setState({ visualizingAlgorithm: true });\r\n    setTimeout(() => {\r\n      const startNode = grid[startNodeRow][startNodeCol];\r\n      const finishNode = grid[finishNodeRow][finishNodeCol];\r\n      const visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\r\n      const nodesInShortestPathOrder =\r\n        getNodesInShortestPathOrderDijkstra(finishNode);\r\n      animateAlgorithm(visitedNodesInOrder, nodesInShortestPathOrder);\r\n    }, speed);\r\n  }\r\n\r\n//   function visualizeAStar() {\r\n//     if (visualizingAlgorithm || generatingMaze) {\r\n//       return;\r\n//     }\r\n//     setVisualizingAlgorithm(true);\r\n//     //this.setState({ visualizingAlgorithm: true });\r\n//     setTimeout(() => {\r\n//       const startNode = grid[startNodeRow][startNodeCol];\r\n//       const finishNode = grid[finishNodeRow][finishNodeCol];\r\n//       const visitedNodesInOrder = astar(grid, startNode, finishNode);\r\n//       const nodesInShortestPathOrder =\r\n//         getNodesInShortestPathOrderAstar(finishNode);\r\n//       animateAlgorithm(visitedNodesInOrder, nodesInShortestPathOrder);\r\n//     }, speed);\r\n//   }\r\n\r\n  function visualizeBFS() {\r\n    if (visualizingAlgorithm || generatingMaze) {\r\n      return;\r\n    }\r\n    setVisualizingAlgorithm(true);\r\n    // this.setState({ visualizingAlgorithm: true });\r\n    setTimeout(() => {\r\n      const startNode = grid[startNodeRow][startNodeCol];\r\n      const finishNode = grid[finishNodeRow][finishNodeCol];\r\n      const visitedNodesInOrder = breadthFirstSearch(\r\n        grid,\r\n        startNode,\r\n        finishNode\r\n      );\r\n      const nodesInShortestPathOrder =\r\n        getNodesInShortestPathOrderBFS(finishNode);\r\n      animateAlgorithm(visitedNodesInOrder, nodesInShortestPathOrder);\r\n    }, speed);\r\n  }\r\n\r\n  function visualizeDFS() {\r\n    if (visualizingAlgorithm || generatingMaze) {\r\n      return;\r\n    }\r\n    setVisualizingAlgorithm(true);\r\n    // this.setState({ visualizingAlgorithm: true });\r\n    setTimeout(() => {\r\n      const startNode = grid[startNodeRow][startNodeCol];\r\n      const finishNode = grid[finishNodeRow][finishNodeCol];\r\n      const visitedNodesInOrder = depthFirstSearch(grid, startNode, finishNode);\r\n      const nodesInShortestPathOrder =\r\n        getNodesInShortestPathOrderDFS(finishNode);\r\n      animateAlgorithm(visitedNodesInOrder, nodesInShortestPathOrder);\r\n    }, speed);\r\n  }\r\n\r\n//   function visualizeRandomWalk() {\r\n//     if (visualizingAlgorithm || generatingMaze) {\r\n//       return;\r\n//     }\r\n//     setVisualizingAlgorithm(true);\r\n//     // this.setState({ visualizingAlgorithm: true });\r\n//     setTimeout(() => {\r\n//       const startNode = grid[startNodeRow][startNodeCol];\r\n//       const finishNode = grid[finishNodeRow][finishNodeCol];\r\n//       const visitedNodesInOrder = randomWalk(grid, startNode, finishNode);\r\n//       animateRandomWalk(visitedNodesInOrder);\r\n//     }, speed);\r\n//   }\r\n\r\n//   function visualizeGreedyBFS() {\r\n//     if (visualizingAlgorithm || generatingMaze) {\r\n//       return;\r\n//     }\r\n//     setVisualizingAlgorithm(true);\r\n//     // this.setState({ visualizingAlgorithm: true });\r\n//     setTimeout(() => {\r\n//       const startNode = grid[startNodeRow][startNodeCol];\r\n//       const finishNode = grid[finishNodeRow][finishNodeCol];\r\n//       const visitedNodesInOrder = greedyBFS(grid, startNode, finishNode);\r\n//       const nodesInShortestPathOrder =\r\n//         getNodesInShortestPathOrderGreedyBFS(finishNode);\r\n//       animateAlgorithm(visitedNodesInOrder, nodesInShortestPathOrder);\r\n//     }, speed);\r\n//   }\r\n\r\n//   function visualizeBidirectionalGreedySearch() {\r\n//     if (visualizingAlgorithm || generatingMaze) {\r\n//       return;\r\n//     }\r\n//     setVisualizingAlgorithm(true);\r\n//     //this.setState({ visualizingAlgorithm: true });\r\n//     setTimeout(() => {\r\n//       const startNode = grid[startNodeRow][startNodeCol];\r\n//       const finishNode = grid[finishNodeRow][finishNodeCol];\r\n//       const visitedNodesInOrder = bidirectionalGreedySearch(\r\n//         grid,\r\n//         startNode,\r\n//         finishNode\r\n//       );\r\n//       const visitedNodesInOrderStart = visitedNodesInOrder[0];\r\n//       const visitedNodesInOrderFinish = visitedNodesInOrder[1];\r\n//       const isShortedPath = visitedNodesInOrder[2];\r\n//       const nodesInShortestPathOrder =\r\n//         getNodesInShortestPathOrderBidirectionalGreedySearch(\r\n//           visitedNodesInOrderStart[visitedNodesInOrderStart.length - 1],\r\n//           visitedNodesInOrderFinish[visitedNodesInOrderFinish.length - 1]\r\n//         );\r\n//       animateBidirectionalAlgorithm(\r\n//         visitedNodesInOrderStart,\r\n//         visitedNodesInOrderFinish,\r\n//         nodesInShortestPathOrder,\r\n//         isShortedPath\r\n//       );\r\n//     }, speed);\r\n//   }\r\n\r\n//animation for walls\r\n  const animateMaze = (walls) => {\r\n    for (let i = 0; i <= walls.length; i++) {\r\n      if (i === walls.length) {\r\n        setTimeout(() => {\r\n          clearGrid();\r\n          let newGrid = getNewGridWithMaze(grid, walls);\r\n          setGrid(newGrid);\r\n          setGeneratingMaze(false);\r\n          //this.setState({ grid: newGrid, generatingMaze: false });\r\n        }, i * mazeSpeed);\r\n        return;\r\n      }\r\n      let wall = walls[i];\r\n      let node = grid[wall[0]][wall[1]];\r\n      setTimeout(() => {\r\n        //Walls\r\n        document.getElementById(`node-${node.row}-${node.col}`).className =\r\n          \"node node-wall-animated\";\r\n      }, i * mazeSpeed);\r\n    }\r\n  };\r\n\r\n  function generateRandomMaze() {\r\n    if (visualizingAlgorithm || generatingMaze) {\r\n      return;\r\n    }\r\n    setGeneratingMaze(true);\r\n    //this.setState({ generatingMaze: true });\r\n    setTimeout(() => {\r\n      const startNode = grid[startNodeRow][startNodeCol];\r\n      const finishNode = grid[finishNodeRow][finishNodeCol];\r\n      const walls = randomMaze(grid, startNode, finishNode);\r\n      animateMaze(walls);\r\n    }, mazeSpeed);\r\n  }\r\n\r\n  function generateRecursiveDivisionMaze() {\r\n    if (visualizingAlgorithm || generatingMaze) {\r\n      return;\r\n    }\r\n    setGeneratingMaze(true);\r\n    // this.setState({ generatingMaze: true });\r\n    setTimeout(() => {\r\n      const startNode = grid[startNodeRow][startNodeCol];\r\n      const finishNode = grid[finishNodeRow][finishNodeCol];\r\n      const walls = recursiveDivisionMaze(grid, startNode, finishNode);\r\n      animateMaze(walls);\r\n    }, mazeSpeed);\r\n  }\r\n\r\n  function generateVerticalMaze() {\r\n    if (visualizingAlgorithm || generatingMaze) {\r\n      return;\r\n    }\r\n    setGeneratingMaze(true);\r\n    //this.setState({ generatingMaze: true });\r\n    setTimeout(() => {\r\n      const startNode = grid[startNodeRow][startNodeCol];\r\n      const finishNode = grid[finishNodeRow][finishNodeCol];\r\n      const walls = verticalMaze(grid, startNode, finishNode);\r\n      animateMaze(walls);\r\n    }, mazeSpeed);\r\n  }\r\n\r\n  function generateHorizontalMaze() {\r\n    if (visualizingAlgorithm || generatingMaze) {\r\n      return;\r\n    }\r\n    setGeneratingMaze(true);\r\n    // this.setState({ generatingMaze: true });\r\n    setTimeout(() => {\r\n      const startNode = grid[startNodeRow][startNodeCol];\r\n      const finishNode = grid[finishNodeRow][finishNodeCol];\r\n      const walls = horizontalMaze(grid, startNode, finishNode);\r\n      animateMaze(walls);\r\n    }, mazeSpeed);\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <NavBar\r\n        visualizingAlgorithm={visualizingAlgorithm}\r\n        generatingMaze={generatingMaze}\r\n        visualizeDijkstra={visualizeDijkstra}\r\n        // visualizeAStar={visualizeAStar}\r\n        // visualizeGreedyBFS={visualizeGreedyBFS}\r\n        // visualizeBidirectionalGreedySearch={visualizeBidirectionalGreedySearch}\r\n        visualizeBFS={visualizeBFS}\r\n        visualizeDFS={visualizeDFS}\r\n        // visualizeRandomWalk={visualizeRandomWalk}\r\n        generateRandomMaze={generateRandomMaze}\r\n        generateRecursiveDivisionMaze={generateRecursiveDivisionMaze}\r\n        generateVerticalMaze={generateVerticalMaze}\r\n        generateHorizontalMaze={generateHorizontalMaze}\r\n        clearGrid={clearGrid}\r\n        clearPath={clearPath}\r\n        updateSpeed={updateSpeed}\r\n      />\r\n      \r\n      <div class=\"d-flex flex-row flex-wrap m-2 justify-content-around\">\t\r\n      <div class=\"d-flex p-2\">\r\n        <div class=\"key wall\"></div>  \r\n        <div> Wall</div>\r\n      </div>\r\n      <div class=\"d-flex p-2\">\r\n        <div class=\"key start\"></div>  \r\n        <div>Start</div>\r\n      </div>\r\n      <div class=\"d-flex p-2\">\r\n        <div class=\"key end\"></div>  \r\n        <div>Target</div>\r\n      </div>\r\n      <div class=\"d-flex p-2\">\r\n        <div class=\"key visited\"></div>  \r\n        <div>Visited</div>\r\n      </div>\r\n      <div class=\"d-flex p-2\">\r\n        <div class=\"key success\"></div>  \r\n        <div>Shortest-Path</div>\r\n      </div>\r\n      <div class=\"d-flex p-2\">\r\n        <div class=\"key\"></div>  \r\n        <div>Unvisited</div>\r\n      </div>\r\n    </div>\r\n\r\n      <div\r\n        className={\r\n          visualizingAlgorithm || generatingMaze ? \"grid-visualizing\" : \"grid\"\r\n        }\r\n      >\r\n        {grid.map((row, rowId) => {\r\n          return (\r\n            <div key={rowId}>\r\n              {row.map((node, nodeId) => {\r\n                const {\r\n                  row,\r\n                  col,\r\n                  isStart,\r\n                  isFinish,\r\n                  isVisited,\r\n                  isShortest,\r\n                  isWall,\r\n                } = node;\r\n                return (\r\n                  <Node\r\n                    key={nodeId}\r\n                    row={row}\r\n                    col={col}\r\n                    isStart={isStart}\r\n                    isFinish={isFinish}\r\n                    isVisited={isVisited}\r\n                    isShortest={isShortest}\r\n                    isWall={isWall}\r\n                    onMouseDown={(row, col) => handleMouseDown(row, col)}\r\n                    onMouseEnter={(row, col) => handleMouseEnter(row, col)}\r\n                    onMouseUp={() => handleMouseUp()}\r\n                    width={width}\r\n                    height={height}\r\n                    numRows={numRows}\r\n                    numColumns={numColumns}\r\n                  ></Node>\r\n                );\r\n              })}\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\n// finding rows and columns accoding to width and height\r\nfunction getInitialNum(width, height) {\r\n  let numColumns;\r\n  if (width > 1500) {\r\n    numColumns = Math.floor(width / 25);\r\n  } else if (width > 1250) {\r\n    numColumns = Math.floor(width / 22.5);\r\n  } else if (width > 1000) {\r\n    numColumns = Math.floor(width / 20);\r\n  } else if (width > 750) {\r\n    numColumns = Math.floor(width / 17.5);\r\n  } else if (width > 500) {\r\n    numColumns = Math.floor(width / 15);\r\n  } else if (width > 250) {\r\n    numColumns = Math.floor(width / 12.5);\r\n  } else if (width > 0) {\r\n    numColumns = Math.floor(width / 10);\r\n  }\r\n  let cellWidth = Math.floor(width / numColumns);\r\n  let numRows = Math.floor(height / cellWidth);\r\n  return [numRows, numColumns];\r\n}\r\n\r\n//function to find random source and destnation nodes\r\nfunction getStartFinishNode(numRows, numColumns) {\r\n  //starting node is always in top-left part\r\n  let startNodeRow = Math.floor(Math.random() * (numRows / 2)) + 1; //added 1 to prevent out of bounds\r\n  let startNodeCol = Math.floor(Math.random() * (numColumns / 2)) + 1;\r\n\r\n  //finishing node is always in bottom-right part\r\n  let finishNodeRow =\r\n    Math.floor(numRows / 2) + Math.floor(Math.random() * (numRows / 2)) - 1;\r\n  let finishNodeCol =\r\n    Math.floor(numColumns / 2) +\r\n    Math.floor(Math.random() * (numColumns / 2)) -\r\n    1;\r\n\r\n  return [startNodeRow, startNodeCol, finishNodeRow, finishNodeCol];\r\n}\r\n\r\n//creating grid\r\nconst getInitialGrid = (numRows, numColumns) => {\r\n  let grid = [];\r\n  for (let row = 0; row < numRows; row++) {\r\n    let currentRow = [];\r\n    for (let col = 0; col < numColumns; col++) {\r\n      currentRow.push(createNode(row, col));\r\n    }\r\n    grid.push(currentRow);\r\n  }\r\n  return grid;\r\n};\r\n\r\nconst createNode = (row, col) => {\r\n  return {\r\n    row,\r\n    col,\r\n    isStart: row === startNodeRow && col === startNodeCol,\r\n    isFinish: row === finishNodeRow && col === finishNodeCol,\r\n    distance: Infinity,\r\n    totalDistance: Infinity,\r\n    isVisited: false,\r\n    isShortest: false,\r\n    isWall: false,\r\n    previousNode: null,\r\n  };\r\n};\r\n\r\nconst getNewGridWithWalls = (grid, row, col) => {\r\n  let newGrid = grid.slice();        //copy the old grid \r\n  let node = grid[row][col];        //updating node's wall \r\n  let newNode = {\r\n    ...node,\r\n    isWall: !node.isWall,\r\n  };\r\n  newGrid[row][col] = newNode;\r\n  return newGrid;\r\n};\r\n\r\nconst getNewGridWithMaze = (grid, walls) => {\r\n  let newGrid = grid.slice();\r\n  for (let wall of walls) {\r\n    let node = grid[wall[0]][wall[1]];\r\n    let newNode = {\r\n      ...node,\r\n      isWall: true,\r\n    };\r\n    newGrid[wall[0]][wall[1]] = newNode;\r\n  }\r\n  return newGrid;\r\n};\r\n\r\nconst getGridWithoutPath = (grid) => {\r\n  let newGrid = grid.slice();       //copy the old grid \r\n  for (let row of grid) {            // removing paths from each cell of grid  \r\n    for (let node of row) {\r\n      let newNode = {\r\n        ...node,\r\n        distance: Infinity,\r\n        totalDistance: Infinity,\r\n        isVisited: false,\r\n        isShortest: false,\r\n        previousNode: null,\r\n      };\r\n      newGrid[node.row][node.col] = newNode;\r\n    }\r\n  }\r\n  return newGrid;\r\n};\r\n\r\nconst updateNodesForRender = (\r\n  grid,\r\n  nodesInShortestPathOrder,\r\n  visitedNodesInOrder\r\n) => {\r\n  let newGrid = grid.slice();\r\n    //after printing path we render the nodes if we make walls it is ok\r\n  //but if we rmove walls the it will restore its properties of animation\r\n  for (let node of visitedNodesInOrder) {\r\n    if (\r\n      (node.row === startNodeRow && node.col === startNodeCol) ||\r\n      (node.row === finishNodeRow && node.col === finishNodeCol)\r\n    )\r\n      continue;\r\n    let newNode = {\r\n      ...node,\r\n      isVisited: true,\r\n    };\r\n    newGrid[node.row][node.col] = newNode;\r\n  }\r\n  for (let node of nodesInShortestPathOrder) {\r\n    if (node.row === finishNodeRow && node.col === finishNodeCol) {\r\n      return newGrid;\r\n    }\r\n    let newNode = {\r\n      ...node,\r\n      isVisited: false,\r\n      isShortest: true,\r\n    };\r\n    newGrid[node.row][node.col] = newNode;\r\n  }\r\n};\r\n\r\n// const getVisitedNodesInOrder = (\r\n//   visitedNodesInOrderStart,\r\n//   visitedNodesInOrderFinish\r\n// ) => {\r\n//   let visitedNodesInOrder = [];\r\n//   let n = Math.max(\r\n//     visitedNodesInOrderStart.length,\r\n//     visitedNodesInOrderFinish.length\r\n//   );\r\n//   for (let i = 0; i < n; i++) {\r\n//     if (visitedNodesInOrderStart[i] !== undefined) {\r\n//       visitedNodesInOrder.push(visitedNodesInOrderStart[i]);\r\n//     }\r\n//     if (visitedNodesInOrderFinish[i] !== undefined) {\r\n//       visitedNodesInOrder.push(visitedNodesInOrderFinish[i]);\r\n//     }\r\n//   }\r\n//   return visitedNodesInOrder;\r\n// };\r\n\r\nexport default PathfindingVisualizer;\r\n\r\n","export function randomMaze(grid, startNode, finishNode) {\r\n  if (!startNode || !finishNode || startNode === finishNode) {\r\n    return false;\r\n  }\r\n  let walls = [];\r\n  for (let row = 0; row < grid.length; row++) {\r\n    for (let col = 0; col < grid[0].length; col++) {\r\n      if (\r\n        (row === startNode.row && col === startNode.col) ||\r\n        (row === finishNode.row && col === finishNode.col)\r\n      )\r\n        continue;\r\n      if (Math.random() < 0.33) {\r\n        walls.push([row, col]);\r\n      }\r\n    }\r\n  }\r\n  walls.sort(() => Math.random() - 0.5);\r\n  return walls;\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\nimport \"bootstrap/js/dist/dropdown\";\r\nimport PathfindingVisualizer from \"./pathfindingVisualizer/pathfindingVisualizer\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <PathfindingVisualizer />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}